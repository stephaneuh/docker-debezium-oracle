version: "3"
services:
  oracle:
    image: oracle/database:19.3.0-ee
    environment:
      - ORACLE_PDB=ORCLPDB1
      - ORACLE_SID=ORCLCDB
      - ORACLE_PWD=password
      - INIT_SGA_SIZE=3000
      - INIT_PGA_SIZE=1000
    ports:
      - "1521:1521"
      - "5500:5500"
    volumes:
      - oradata:/opt/oracle/oradata
      - orastartup:/opt/oracle/scripts/startup

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cp-kafka-connect-dbz-ora:0.1
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
      - oracle
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - broker
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=KC-local
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=http://connect:8083
  debezium-ui:
    image: debezium/debezium-ui
    container_name: debezium-ui
    depends_on:
      - connect
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://connect:8083


  restproxy:
    image: confluentinc/cp-kafka-rest:7.2.1
    restart: always
    depends_on:
      - schema-registry
    hostname: restproxy
    container_name: restproxy
    volumes:
      - ./scripts/security:/etc/kafka/secrets
      - ./scripts/app:/etc/kafka/app
      - ./scripts/security/keypair:/tmp/conf
    ports:
      - "8086:8086"
    environment:
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_BOOTSTRAP_SERVERS: broker:29092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8086

      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.client.truststore.jks
      KAFKA_REST_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: confluent

#      KAFKA_REST_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.restproxy.truststore.jks
#      KAFKA_REST_SSL_TRUSTSTORE_PASSWORD: confluent
#      KAFKA_REST_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.restproxy.keystore.jks
#      KAFKA_REST_SSL_KEYSTORE_PASSWORD: confluent
#      KAFKA_REST_SSL_KEY_PASSWORD: confluent
#      KAFKA_REST_SSL_CLIENT_AUTHENTICATION: 'NONE'
#
#      KAFKA_REST_CLIENT_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.restproxy.truststore.jks
#      KAFKA_REST_CLIENT_SSL_TRUSTSTORE_PASSWORD: confluent
#      KAFKA_REST_CLIENT_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.restproxy.keystore.jks
#      KAFKA_REST_CLIENT_SSL_KEYSTORE_PASSWORD: confluent
#      KAFKA_REST_CLIENT_SSL_KEY_PASSWORD: confluent
#
#      # Credentials and classpath for cub kafka-ready
#      CUB_CLASSPATH: '/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/*:/usr/share/java/cp-base-new/*'

#      # Enable OAuth for REST Proxy's embedded Kafka client that accesses and manages consumer groups and topics
#      KAFKA_REST_CLIENT_SECURITY_PROTOCOL: SASL_SSL
#      KAFKA_REST_CLIENT_SASL_MECHANISM: OAUTHBEARER
#      KAFKA_REST_CLIENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
#      KAFKA_REST_CLIENT_SASL_JAAS_CONFIG: |
#        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
#        username="restAdmin" \
#        password="restAdmin" \
#        metadataServerUrls="https://kafka1:8091,https://kafka2:8092";
#      KAFKA_REST_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}

#      # Enable bearer token authentication which allows the identity of the REST Proxy end user to be propagated to Kafka for authorization
#      KAFKA_REST_KAFKA_REST_RESOURCE_EXTENSION_CLASS: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
#      KAFKA_REST_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
#      KAFKA_REST_PUBLIC_KEY_PATH: /tmp/conf/public.pem

#      # Used by REST Proxy to connect to MDS to verify tokens and authenticate clients
#      KAFKA_REST_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000
#      KAFKA_REST_CLIENT_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000
#      KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: https://kafka1:8091,https://kafka2:8092
#      KAFKA_REST_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: BASIC
#      KAFKA_REST_CONFLUENT_METADATA_BASIC_AUTH_USER_INFO: 'restAdmin:restAdmin'

volumes:
  oradata:
  orastartup:

